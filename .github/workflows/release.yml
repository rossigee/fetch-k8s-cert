---
name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Trigger on tags with semantic versioning

env:
  APP_NAME: 'fetch-k8s-cert'
  APP_VERSION: '1.3.1'
  MAINTAINER: 'rossigee'
  DESC: 'fetch-k8s-cert retrieves a X509 TLS secret from a K8S cluster API endpoint.'

jobs:
  build:
    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-24.04
          - os: linux
            arch: arm64
            runner: ubuntu-24.04-arm
          # - os: macosx
          #   arch: arm64
          #   runner: macos-latest
          # - os: windows
          #   arch: x64
          #   runner: windows-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run tests
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
            go test -v

      - name: Build binary
        run: |
          [ -d build ] || mkdir -p build
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go \
            build -v -ldflags "-X main.version=${{ github.run_number }}" \
            -o build/fetch-k8s-cert${{ matrix.ext }}

      # - name: Determine packaging version number
      #   id: pkgversion
      #   run: |
      #     version_line=$(head -n 1 "debian/changelog")
      #     if [[ "$version_line" =~ ([0-9]+\.[0-9]+\-[0-9]+) ]]; then
      #       echo "::set-output name=version::${BASH_REMATCH[1]}"
      #     else
      #       echo "::set-output name=version::0.0-1"
      #     fi

      - name: Create distribution files
        run: |
          [ -d dist ] || mkdir dist
          cp -r build/* dist
          (
            cd dist
            if [[ "${{ runner.os }}" == Windows ]]; then
              7z a "${{ env.APP_NAME }}-${{ env.APP_VERSION }}.zip" *
            else
              tar czf "${{ env.APP_NAME }}-${{ env.APP_VERSION }}.tar.gz" *
            fi
            ls -lah *.*
          )
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/*.tar.gz
            dist/*.zip

      - name: Build DEB packages
        run: |
          sudo apt-get install -y build-essential debhelper
          dpkg-buildpackage && (
            mkdir -p artifacts
            mv ../*.deb ../*.changes ../*.dsc ../*.tar.gz ./artifacts
            ls -l ./artifacts
          )

      - name: Upload DEB artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact-deb-${{ matrix.os }}-${{ matrix.arch }}
          path: artifacts/*.deb

      # [TODO] Build and upload RPM packages

      # - name: Build RPM packages
      #   run: |
      #     mkdir -p ~/rpmbuild/SPECS ~/rpmbuild/SOURCES
      #     appid=${{ env.APP_NAME }}-${{ env.APP_VERSION }}
      #     cp -r ../fetch-k8s-cert /tmp/${appid} && (
      #       cd /tmp
      #       tar cf - ${appid} | bzip2 > ~/rpmbuild/SOURCES/${appid}.tar.bz2
      #     )
      #     sed -e 's/(^Version:[[:space:]]*).*/\1${{github.ref_name}}/' \
      #       < rpmbuild/SPECS/${{ env.APP_NAME }}.spec \
      #       > ~/rpmbuild/SPECS/${appid}.spec
      #     rpmbuild -bb ~/rpmbuild/SPECS/${appid}.spec && (
      #       mkdir -p artifacts
      #       mv ~/rpmbuild/RPMS/*.rpm ./artifacts
      #       ls -l ./artifacts
      #     )

      # - name: Upload RPM artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: artifact-rpm
      #     path: artifacts/*.rpm
      #     #path: rpmbuild/RPMS/${{ env.ARCH }}/*.rpm

      # [TODO] Build and upload Windows and MacOS packages

  create-release:
    runs-on: ubuntu-latest

    needs:
      - build

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Generate changelog
        run: |
          (
            cd /tmp
            git clone https://github.com/git-chglog/git-chglog
            cd git-chglog
            go install
          )

          ~/go/bin/git-chglog --output ./changelog $(git describe --tags $(git rev-list --tags --max-count=1))

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: ./changelog
          draft: false
          prerelease: false

      - name: Write upload_url to file
        run: echo '${{ steps.create-release.outputs.upload_url }}' > upload_url.txt

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: create-release
          path: upload_url.txt

  upload-release:
    runs-on: ubuntu-latest

    needs: create-release

    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-24.04
          - os: linux
            arch: arm64
            runner: ubuntu-24.04-arm
          # - os: macosx
          #   arch: arm64
          #   runner: macos-latest
          # - os: windows
          #   arch: x64
          #   runner: windows-latest

    steps:
      - name: Download artifact for ${{ matrix.os }}/${{ matrix.arch }}
        uses: actions/download-artifact@v4
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}

      - name: Download release information
        uses: actions/download-artifact@v4
        with:
          name: create-release

      - name: Set upload URL variable
        id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ env.APP_NAME }}_${{ matrix.asset_name_suffix }}
          asset_name: ${{ env.APP_NAME }}_${{ matrix.asset_name_suffix }}
          asset_content_type: ${{ matrix.asset_content_type }}

  upload-linux-packages:
    runs-on: ${{ matrix.runner }}

    needs: create-release

    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-24.04
          - os: linux
            arch: arm64
            runner: ubuntu-24.04-arm
          # - os: macosx
          #   arch: arm64
          #   runner: macos-latest
          # - os: windows
          #   arch: x64
          #   runner: windows-latest

    steps:
      - name: Download ${{ matrix.pkg }} artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}

      - name: Download release info
        uses: actions/download-artifact@v4
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
          echo "::set-output name=asset_name::$(ls *.${{ matrix.pkg }} | head -n 1)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.asset_name }}
          asset_name: ${{ steps.vars.outputs.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}
